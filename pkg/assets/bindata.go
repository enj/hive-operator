// Code generated by go-bindata.
// sources:
// deploy/.DS_Store
// deploy/config/manager_deployment.yaml
// deploy/config/manager_service.yaml
// deploy/config/rbac-role.yaml
// deploy/config/rbac_role_binding.yaml
// deploy/crds/cluster-deployment.yaml
// deploy/crds/dns-zone.yaml
// deploy/crds/hive_v1alpha1_hive_cr.yaml
// deploy/crds/hive_v1alpha1_hive_crd.yaml
// deploy/deployment.yaml
// deploy/manager-namespace.yaml
// deploy/operator.yaml
// deploy/role.yaml
// deploy/role_binding.yaml
// deploy/service_account.yaml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDs_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x97\xd1\x6e\xd3\x30\x14\x86\x7f\x77\x61\xa4\xa0\x69\x41\x9a\x28\x97\xb9\x41\xe2\xa2\xa0\x76\x1b\x0c\x84\x90\xaa\x32\x2e\x76\x87\x54\x04\x17\x80\x3a\xa7\x09\x5d\x24\xd7\xae\x92\x74\x55\x29\x45\xbd\xe1\x1d\xc6\x23\xf0\x26\xbc\x01\x0f\xc2\x03\x80\xe2\x1c\xba\xe2\xb5\xbd\x00\x21\x95\xc9\x9f\xd4\xfe\x8e\x72\x7c\xec\x73\x92\x1c\xdb\x00\x58\x73\x10\xd6\x01\x0f\x80\x8b\x42\x9d\x6b\x58\x88\x4b\xbf\x0b\x94\x48\xb7\x72\x7f\xda\x47\x8c\xee\x91\x50\x9d\x40\xa8\x60\xb1\x2f\x8b\xc5\xb2\x46\xe4\xdf\xee\x26\x3a\x50\x90\x78\x67\x7c\xbf\x79\x51\x78\x0c\xe0\xec\x87\x46\xdb\xff\x66\x1b\x0c\xd3\x3e\xd9\x7e\x0d\xfa\x22\x4e\xb3\x5a\xed\x1b\x2b\x6d\x38\x57\x36\xaf\xba\xe5\xb2\x5b\xde\x72\xdf\xb6\x4e\xd4\xb0\x95\xf1\x6c\x90\x36\x79\xf2\x5a\x5f\xc5\x61\x14\x50\xfb\x85\x52\x62\xd6\xe6\xc1\xcb\x38\x1a\xb6\xbd\x9d\xa7\x4a\x66\x3c\x96\x51\x32\x67\xfe\xe6\x55\x2c\x43\x35\x6c\xaa\x81\x0c\x53\x6d\xff\x9c\x67\x27\x01\x4f\xf4\x40\x6d\xaf\x32\x1e\xd7\x1f\x56\xfd\xdd\xfd\xfb\x93\xaa\x3f\x3e\x38\xa8\x55\xfd\xfd\xbd\x07\x93\x89\xeb\x56\x6e\xd7\x9f\x1c\x1d\xf7\x46\xef\xc7\x1f\x26\x1f\xcf\x8a\xb0\x19\xa3\xf8\xb7\x8d\x7c\x7c\x36\x63\x0c\xd3\x8e\x08\x94\x12\xcc\xbc\x71\xda\x4a\xa4\x50\xb2\x5b\x14\x3f\x38\xe8\x20\x41\x88\x74\x41\x02\xef\xcc\x25\x70\x66\xb7\x6e\xc9\xab\x55\xfd\xdd\xbd\x47\x7f\x9d\xbc\x59\x7c\x46\x7e\xb6\x11\x22\x42\x1f\x02\x0a\x23\xf4\x10\x41\x22\xc3\x3d\x8c\xc0\xd1\x83\x30\xb2\xf6\xc5\x78\xed\x6e\xa2\x07\x0e\x09\x8e\x2e\x22\x24\xb8\xab\xdb\xb9\x97\x14\x7d\x70\x74\x10\x2d\xf3\xc5\x2a\x86\xaf\x2d\x28\xf4\xb5\x17\x8e\x0c\x0a\xc9\xca\x59\xcc\x3f\xbb\x32\x12\x28\x88\x15\x63\x7d\x32\x7a\xdc\x98\xf5\x68\x23\x40\x0c\x89\x50\xff\x77\x57\xce\x76\xde\xc3\x0e\x52\x3d\xd7\x53\xc4\x3a\xca\xb6\x8e\x36\x7f\x0f\x07\xab\x32\xc8\xbe\x1b\x7e\x16\x40\x8f\xd1\xbd\xfe\x87\xb5\xc3\x62\xb1\x5c\x5e\xf2\xfa\xe0\x93\x36\x48\xa7\x85\x32\xba\x5f\x22\x75\xe6\xfa\x78\xa4\x3e\x69\x83\x74\x5a\x28\x23\xbb\x12\xa9\x43\xea\x92\x7a\xa4\x3e\x69\x83\x74\x5a\x28\x15\x2d\x46\x87\x0f\x46\x23\x33\x3a\xa1\x30\x8f\xd4\x27\x6d\xfc\x9b\xdc\x58\x2c\xff\x3b\x1b\x85\x78\xf9\xfa\xff\x6c\xf9\xf9\xdf\x62\xb1\x5c\x62\x98\x73\xd8\x3a\x6c\x9e\x1f\x08\x2e\x50\xa2\x8d\xc0\xf1\xaf\x0e\x4b\x36\x02\x64\x9b\x2f\xc5\xb7\x70\x6e\x6b\x37\x02\x16\xcb\x9a\xf1\x33\x00\x00\xff\xff\x89\xb4\x8d\x99\x04\x18\x00\x00")

func deployDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_deployDs_store,
		"deploy/.DS_Store",
	)
}

func deployDs_store() (*asset, error) {
	bytes, err := deployDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1543599082, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployConfigManager_deploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4d\x6f\x1b\x3b\x0c\xbc\xfb\x57\x0c\xf2\xae\x6f\xfd\xf1\x5e\x0f\x85\x8e\x45\x81\xb6\x40\x1a\x18\x2d\xd0\x3b\xad\xa5\xbd\x44\x24\x51\x95\xb8\x1b\xec\xbf\x2f\x14\x3b\xee\x26\x2d\xd0\x74\x6f\x22\x87\xc3\xd9\x21\x49\x59\xbe\x71\xa9\xa2\xc9\x81\x72\xae\x9b\x69\xb7\xba\x97\xd4\x3b\xbc\xe7\x1c\x74\x8e\x9c\x6c\x15\xd9\xa8\x27\x23\xb7\x02\x12\x45\x76\x18\x64\xe2\xce\x6b\xb2\xa2\x21\x70\xe9\x22\x25\x3a\x71\xb9\xe4\x6b\x26\xcf\x0e\x9a\x39\xd5\x41\x8e\xd6\x35\xf8\x0a\x08\x74\xe0\x50\x1b\x0b\x70\x29\xee\x72\xa0\xc4\x0e\xbf\xe5\xc2\x32\x6c\xaa\xa1\xae\xef\xdf\xd6\xb5\xa8\xc3\xcd\x6e\xbd\xbd\x59\xd5\xcc\xbe\xd1\x55\x0e\xec\x4d\xcb\x99\x3a\x92\xf9\xe1\x76\xd1\xeb\xb5\xdd\xfe\xd8\x0f\x28\x9c\x83\x78\xaa\x0e\xbb\xc7\xd7\x24\xcd\xbb\x8f\x52\x4d\xcb\x7c\x2b\x51\xcc\xe1\x4d\x53\x64\x85\x8c\x4f\xf3\x59\x80\xcd\x99\x1d\xbe\xb0\x2f\x4c\xd6\x9c\x30\x8e\x39\x90\xf1\x45\xf0\xc2\xdf\xf6\x85\x67\xda\x5f\xaf\xfe\x15\xfa\x81\x27\xcf\x9e\xe0\x24\x89\xcb\xb5\xd9\x3f\x78\x37\xa3\xe7\x23\x8d\xc1\xf0\xc0\xa0\xc2\xa0\x5a\xc7\x28\xe9\x04\x42\xcf\x13\x07\xcd\x6d\x2b\x50\xd9\xc6\x8c\x07\xb1\x01\x36\x30\x24\xd2\x89\x91\xc7\x3a\x70\x0f\xd3\x2b\x5f\xcb\x05\xf5\x14\x50\xf8\x24\xd5\xca\xbc\xc6\x7e\x0c\x01\x59\x83\xf8\x19\x75\xd0\x31\xf4\x38\x30\xee\x78\xe2\x02\x49\xb0\x41\x2a\x3c\x55\xfe\x17\x62\x78\x90\x10\x70\xe0\x2b\x61\xd4\x5e\x8e\xc2\x7d\x43\xea\xc4\xa5\x48\xcf\x15\x47\x2d\x20\x6f\x23\x05\x70\x9a\xa4\x68\x6a\x22\xeb\xfa\x52\xd6\x9d\xf5\xfd\xb2\xb9\xae\x4d\xa1\xda\xd5\xc0\x47\x54\x93\xb7\x7f\x54\xe7\xf0\xe9\x78\xa7\xb6\x2f\x5c\xdb\x21\x3c\xa1\xce\x47\xf0\xd2\xfc\xc2\x55\xc7\xe2\x79\x31\x39\x20\xb4\x9d\x78\x16\x01\x7c\x1e\x1d\x76\xdb\x6d\x7c\x16\x8d\x1c\xb5\xcc\x0e\xff\x6f\x3f\xcb\x22\x51\xf8\xfb\xc8\xf5\xef\x28\xfe\x5b\x52\x78\x8d\x91\x52\xff\xb3\xbe\xc3\x46\xb3\x6d\x2a\x97\x49\x3c\xd7\xcd\xcb\xff\xe8\xd0\x75\x41\x4f\x5d\x68\xc3\x5e\x44\x7b\x3e\x8c\xa7\xcb\xdb\xb8\x44\x49\x64\xa2\xe9\x43\x21\xcf\x7b\x2e\xa2\xfd\x57\xf6\x9a\xfa\x76\x1c\xdb\x1f\x01\x00\x00\xff\xff\x1d\xa7\x1f\x4f\x59\x04\x00\x00")

func deployConfigManager_deploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployConfigManager_deploymentYaml,
		"deploy/config/manager_deployment.yaml",
	)
}

func deployConfigManager_deploymentYaml() (*asset, error) {
	bytes, err := deployConfigManager_deploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/config/manager_deployment.yaml", size: 1113, mode: os.FileMode(420), modTime: time.Unix(1543605482, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployConfigManager_serviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xce\xb1\x8a\xc3\x30\x10\x04\xd0\x5e\x5f\xb1\xb8\x97\x39\x73\x2e\x8e\xfd\x8d\x83\xeb\xf7\xe4\x49\x2c\x2c\x6b\x85\x56\xf8\xfb\x83\x1c\x17\x81\xb4\xe9\x96\x65\xe6\x31\x52\xe2\x1f\xaa\x45\xcd\x4c\xc7\xe4\xb6\x98\x17\xa6\x5f\xd4\x23\x06\xb8\x1d\x4d\x16\x69\xc2\x8e\x28\xcb\x0e\xa6\x35\x1e\xf0\x41\x73\xab\x9a\x12\xaa\xdf\x25\xcb\x1d\xd5\xdb\xd5\x78\xe6\xac\x48\x00\x93\x16\x64\x5b\xe3\xad\xf9\x5e\x73\x44\x49\xfe\x91\xac\x6b\x44\x17\xe2\x4b\x92\x0c\xa6\x77\xf3\x35\xd5\xdf\x4d\x35\xd9\xb8\xfd\xd8\x18\x95\x69\x98\xc6\xaf\xc1\x59\x41\xe8\x9c\x21\x21\x34\xad\x1f\xa4\x89\x8a\xd6\x76\x8e\xf5\xe7\xc9\x34\xcf\xdf\x8f\x00\x00\x00\xff\xff\x66\x10\x8f\x97\x2f\x01\x00\x00")

func deployConfigManager_serviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployConfigManager_serviceYaml,
		"deploy/config/manager_service.yaml",
	)
}

func deployConfigManager_serviceYaml() (*asset, error) {
	bytes, err := deployConfigManager_serviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/config/manager_service.yaml", size: 303, mode: os.FileMode(420), modTime: time.Unix(1543346832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployConfigRbacRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\x31\x6f\xe3\x30\x0c\x85\x77\xfd\x0a\x22\xbb\x1d\xdc\x76\xf0\x7a\xc3\xed\x45\xd1\x9d\x96\x18\x9b\x8d\x44\x09\xa4\xe4\xa2\xf9\xf5\x45\x12\x27\x8b\x9b\xad\x01\x3a\xe9\xe1\x11\x4f\xfc\x44\x11\x0b\xbf\x91\x1a\x67\x19\x40\x47\xf4\x3d\xb6\x3a\x67\xe5\x13\x56\xce\xd2\x1f\xff\x5a\xcf\x79\xbf\xfc\x71\x47\x96\x30\xc0\xbf\xd8\xac\x92\xbe\xe4\x48\x2e\x51\xc5\x80\x15\x07\x07\xe0\x95\x2e\x81\x57\x4e\x64\x15\x53\x19\x40\x5a\x8c\x0e\x40\x30\xd1\x00\x09\x05\x27\xd2\x4e\xcf\x41\x6d\x91\x6c\x70\x1d\x60\xe1\xff\x9a\x5b\xb1\xf3\x15\x1d\x8c\x58\xfd\xec\x00\x94\x2c\x37\xf5\xb4\xda\xef\x79\x34\x07\xb0\x90\x8e\xab\x33\x51\xbd\x9c\x91\xed\x2a\x3e\xd6\x64\x77\x05\xa1\x8b\x6c\x25\xdc\x64\xb9\xd7\x03\x45\xaa\xb4\xed\xbd\xdb\x6d\x1b\x1b\xe9\xc2\x9e\xd0\xfb\xdc\xa4\xda\xea\x79\xa5\x55\xfb\x2c\x07\x9e\x12\x96\xe7\xe3\x3d\xfc\x9a\x2d\xf5\x79\xc4\x76\x57\x23\x4b\x60\x99\x9e\x4f\x38\xf3\x42\x7d\x2e\x24\x36\xf3\xa1\x7e\x4b\xe6\xaf\xcb\x13\xa8\xc4\xfc\x99\xe8\x36\xd2\xad\xbd\xb7\x8a\xb5\x3d\xac\x1e\x58\x30\xf2\x89\xf4\x57\xbc\x2a\x88\x9d\xb2\xd0\x4f\xb3\x7c\x05\x00\x00\xff\xff\xe8\xdf\xe5\x9c\x99\x03\x00\x00")

func deployConfigRbacRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployConfigRbacRoleYaml,
		"deploy/config/rbac-role.yaml",
	)
}

func deployConfigRbacRoleYaml() (*asset, error) {
	bytes, err := deployConfigRbacRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/config/rbac-role.yaml", size: 921, mode: os.FileMode(420), modTime: time.Unix(1542402340, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployConfigRbac_role_bindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\x31\x4e\x43\x31\x0c\xc6\xf1\x3d\xa7\xf0\x05\xfa\x10\x1b\xca\x06\x0c\xec\x05\xb1\xfb\x25\x6e\x31\x4d\xec\xc8\x76\x2a\xc1\xe9\x51\xd1\x83\x05\xd4\xcd\x1e\x7e\x9f\xfe\x38\xf8\x95\xcc\x59\x25\x83\xad\x58\x16\x9c\xf1\xa6\xc6\x9f\x18\xac\xb2\x9c\xee\x7c\x61\xbd\x39\xdf\xa6\x13\x4b\xcd\xf0\xd8\xa6\x07\xd9\x5e\x1b\x3d\xb0\x54\x96\x63\xea\x14\x58\x31\x30\x27\x80\x62\xf4\xed\x5e\xb8\x93\x07\xf6\x91\x41\x66\x6b\x09\x40\xb0\x53\x86\x8e\x82\x47\xb2\x9d\x69\xa3\x75\xf3\x97\x7b\x4f\x87\x0b\xc7\xc1\x4f\xa6\x73\x5c\x49\x49\x00\x7f\x4a\xfe\x9d\x4f\x3e\xd7\x77\x2a\xe1\x39\xed\x36\xf2\x4c\x76\xe6\x42\xf7\xa5\xe8\x94\xf8\x55\x95\x0e\x38\xdb\xcf\xef\x03\x0b\x65\xf0\x0f\x0f\xea\x5f\x01\x00\x00\xff\xff\x65\x59\x37\xa8\x1e\x01\x00\x00")

func deployConfigRbac_role_bindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployConfigRbac_role_bindingYaml,
		"deploy/config/rbac_role_binding.yaml",
	)
}

func deployConfigRbac_role_bindingYaml() (*asset, error) {
	bytes, err := deployConfigRbac_role_bindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/config/rbac_role_binding.yaml", size: 286, mode: os.FileMode(420), modTime: time.Unix(1543347075, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployCrdsClusterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x49\x8f\xeb\x36\x0c\xbe\xfb\x57\x08\x73\x77\xda\xa0\x45\x51\xf8\xd6\xbe\x5c\x82\x02\x83\x41\x5e\x67\xee\x8c\xcc\x24\xec\xc8\x92\x9e\x24\x7b\x9a\xfe\xfa\xc2\x5b\x36\x5b\x4b\x26\x0f\x2d\x6f\x16\x29\x8a\xfc\x24\x2e\x26\x68\x7a\x43\x63\x49\xc9\x82\x81\x26\xfc\xdb\xa1\x6c\xbf\xec\xe2\xfd\x57\xbb\x20\xf5\x43\xb3\xdc\xa2\x83\x65\xf6\x4e\xb2\x2c\xd8\x97\xda\x3a\x55\x6d\xd0\xaa\xda\x70\x5c\xe1\x8e\x24\x39\x52\x32\xab\xd0\x41\x09\x0e\x8a\x8c\x31\x6e\x10\xda\xc5\x3f\xa9\x42\xeb\xa0\xd2\x05\x93\xb5\x10\x19\x63\x02\xb6\x28\x6c\x2b\xc3\x18\x57\xd2\x19\x25\x04\x9a\xdc\x29\x25\xc6\x03\x0b\xf6\xb4\x5c\xfc\xf8\x94\x31\x26\xa1\xc2\x82\x71\x51\x5b\x87\xa6\x44\x2d\xd4\xb1\x42\xe9\xec\xe2\x40\x0d\x2e\x94\x46\x69\x0f\xb4\x73\x0b\x52\x99\xd5\xc8\x5b\xad\x7b\xa3\x6a\x5d\xb0\xa9\x40\xaf\x6d\x38\x79\x70\xa5\x57\xbc\x3a\x29\xee\x78\x5a\xd4\x06\xc4\xdc\xb1\x19\x63\x96\x2b\x8d\x05\x7b\x6e\x55\x69\xe0\x58\x66\x8c\x35\x20\xa8\xec\xdc\xed\x95\xb7\xc7\xfe\xf6\xb2\x7e\xfb\xe9\x2b\x3f\x60\x05\xfd\x22\x63\xda\x28\x8d\xc6\xd1\x68\x43\x4b\x17\xd8\x9f\xd6\x18\x73\xc7\xf6\x0c\xeb\x0c\xc9\xfd\x69\xb9\x33\x39\x26\x74\x79\x07\xd7\x82\x6a\xfb\x17\x72\x77\x5a\x1e\xe1\x1a\x69\xce\xb8\xe1\x8a\x76\xb4\xbf\x5e\xf3\x4b\x77\x2e\x95\x15\xc9\xe9\x72\x78\x53\x4b\x58\x01\x89\x79\x96\xc7\xdb\x2b\xed\x60\xed\x87\x32\x65\x58\xc1\x0d\x0a\x97\x64\xed\xe1\x0f\x3c\x7e\x72\xbb\xc1\x6f\x35\x19\x9c\x3d\x3d\xef\x3d\x9b\xe5\x8c\x56\xcf\x30\x83\x27\x6e\xc1\xe2\x4a\x55\x30\x8f\x74\x10\xac\xe1\x59\xaf\x57\x77\xef\xac\x80\x1f\x48\xce\x5f\x1f\x39\xac\x3c\xf7\x1a\xbb\xf7\x21\xcc\x3d\xbc\x84\xab\x6f\x43\x16\xdc\x4e\x99\xca\xaf\x24\x6e\x44\x4b\xf0\x11\x64\xa7\xaa\x69\x89\xa0\xda\x28\x81\xcf\x41\xd7\x46\x4a\x70\x71\x24\xa3\x94\x7b\x53\xa2\x4e\x51\x9b\x6e\x6d\x67\xb1\xd2\x49\x72\x8c\xb5\x50\x83\x2b\x18\x49\xf7\xcb\xcf\x49\x3b\x7a\x07\x49\x3a\xdc\xa3\x49\xd8\x61\xe9\x9f\x04\xff\xfe\x1b\x5b\x3a\xf9\x3b\x34\x27\x5d\x63\x38\x65\x5c\x53\xde\x5d\x4d\x82\x58\x8b\x5a\x82\x58\x6b\x66\xe2\x93\x0c\xe4\xcb\x1b\xd1\xef\xf7\xc6\xd3\x80\x49\x70\x23\xbf\x0c\xc2\x88\xe4\x39\xac\x82\x82\x89\xa8\x08\xda\x36\x64\xdc\xf7\xca\x25\xdf\xb8\xfa\x58\x57\xb0\xc7\x17\x70\x87\xff\x01\xe9\xab\xf3\x1f\xc7\x27\x41\xc8\xa0\x16\xc4\x21\x80\x4c\x5a\xdc\xc7\x63\x3d\x8c\x41\xde\xd5\x26\x0f\x6b\x34\xd2\xc3\x1e\x8b\xd2\x2c\x3b\x82\x41\xcf\x06\x63\xe0\x38\xe1\x4a\x74\x1f\xca\xbc\x93\x9c\xb4\x65\x2c\xe1\x55\x69\x55\x7e\x59\xaf\x36\x9f\xee\xb3\x2c\x9a\x86\x38\x3e\xa4\x23\x94\x30\x22\x9b\xc3\x8d\x96\x27\x25\xe4\x97\x56\xcf\xf7\x61\x3d\x2a\xf7\xb6\x61\xa1\xbe\x23\x76\x11\x81\x5e\x23\x25\x33\x18\xdc\xdf\xfc\x35\xcc\x5b\x1e\x49\x03\x0e\xf6\xc1\xf4\x93\x14\xd0\x8d\xe6\x2d\x7a\xbf\x0b\xc5\xdf\x1f\xb6\xa8\xd1\x7c\xbe\x37\xbd\x43\x4b\x2c\xb1\xe5\x03\x7c\x5e\x76\x67\x44\x88\x7b\xf2\xf7\xb3\xbf\x1b\x91\x12\x91\xf2\x04\x5e\x37\xeb\x87\xd1\xae\xa0\xfb\x19\x78\x09\x3e\x82\x40\x73\x3f\xd2\x98\x8e\xb7\x47\x97\x52\x41\xa3\xc5\x29\x94\x00\x47\x1a\x12\x61\xc8\xb0\xd4\x1a\x4b\xbb\x58\x59\x4d\x2e\xaa\xa4\x37\x20\xf7\xd1\x86\x28\x59\x5f\xf8\xe7\xe8\x2e\x65\x29\xf5\x3e\x50\xf1\x46\x01\xda\x85\xd9\x3d\x00\x8f\x25\x95\x78\x04\xbf\x6e\xd6\x5e\xde\xf0\x32\xbc\xfc\xd3\xab\xff\x5c\xf4\x86\x6b\x42\x2d\xc4\x57\xe4\x06\x67\x63\x3b\xb0\xd5\xe7\x72\x7e\xfe\x65\x9f\x70\xba\x61\xcb\x64\xf5\x3c\x1d\x98\xb0\xce\xcd\xc3\x84\x35\xfe\xde\x4f\x18\x9e\x46\x26\xbf\x70\x35\x4b\xf4\x72\x54\xd5\xef\x9a\x04\x65\x70\xae\x34\x5f\x2f\x63\x11\xce\x0d\x96\x28\x1d\x81\xf0\xa6\x80\x87\x66\x3b\x17\xfa\xef\xbb\x6e\x0f\x6b\xee\xb4\x7c\x18\xc3\x5d\x2d\xdd\x40\x99\x45\x34\x5b\x07\xae\xb6\x49\x23\xbf\xfe\xb5\xbd\xbe\x4e\xcb\xb0\x37\xcf\x90\xb4\x0e\x84\x98\x82\xd4\xef\xd8\x2a\x25\x10\x64\xd4\xcd\x93\x9a\x6b\xe7\xcf\x06\xf9\xbd\x6c\xc6\x11\x76\xb3\x04\xa1\x0f\xb0\xcc\xce\x1e\x03\xe7\xa8\x1d\x96\xcf\xb7\x03\xe0\xa7\xa7\xee\x63\x9c\xf8\x76\x9f\x5c\xc9\xb2\x1b\x68\xdb\x7e\x66\xfd\x6f\x00\x00\x00\xff\xff\xfd\x18\x88\xbe\x1f\x17\x00\x00")

func deployCrdsClusterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployCrdsClusterDeploymentYaml,
		"deploy/crds/cluster-deployment.yaml",
	)
}

func deployCrdsClusterDeploymentYaml() (*asset, error) {
	bytes, err := deployCrdsClusterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/crds/cluster-deployment.yaml", size: 5919, mode: os.FileMode(420), modTime: time.Unix(1542392783, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployCrdsDnsZoneYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4d\x8f\xd3\x30\x10\xbd\xfb\x57\x8c\x7a\x6f\x20\x02\x21\xe4\x1b\x62\x25\xc4\xa5\x42\x14\xed\x01\xc4\x61\x6a\x4f\x5b\xb3\x8e\xc7\xd8\x93\xc0\xf2\xeb\x91\x93\x4d\x3f\xd2\x86\xad\xc4\xdc\xf2\x3c\x9e\xf7\xe6\x4d\xc6\x18\xdd\x3d\xa5\xec\x38\x68\xc0\xe8\xe8\xb7\x50\x28\x5f\xb9\x7a\x78\x9b\x2b\xc7\x2f\xba\x7a\x43\x82\xb5\x7a\x70\xc1\x6a\x78\xdf\x66\xe1\xe6\x33\x65\x6e\x93\xa1\x3b\xda\xba\xe0\xc4\x71\x50\x0d\x09\x5a\x14\xd4\x0a\xc0\x24\xc2\x02\x7e\x71\x0d\x65\xc1\x26\x6a\x08\xad\xf7\x0a\xc0\xe3\x86\x7c\x2e\x39\x00\x86\x83\x24\xf6\x9e\xd2\x52\x98\xfd\x48\xa8\x61\x51\x57\x2f\x17\x0a\x20\x60\x43\x1a\x6c\xc8\x7f\x38\x50\xae\xf6\xae\xa3\x8a\x23\x85\xbc\x77\x5b\xa9\x1c\xab\x1c\xc9\x94\x5a\xbb\xc4\x6d\xd4\x70\x99\x30\xd4\x78\xe2\x1b\x1a\xb8\x5b\xad\xbf\x72\xa0\x1e\x89\xbe\x4d\xe8\x8f\x14\x0a\x20\x1b\x8e\xa4\x61\x55\xae\x45\x34\x64\x15\x40\x87\xde\xd9\xbe\xa1\xa1\x50\xa1\x78\xf7\xe9\xe3\xfd\xab\xb5\xd9\x53\x83\x03\x08\x10\x13\x47\x4a\xe2\x46\xbe\x12\x27\xee\x1e\x30\x00\x79\x2c\x1c\x59\x92\x0b\xbb\x03\xdc\xcb\x7b\x2e\xe9\xd4\xe5\xf3\x44\xde\xfc\x20\x23\x07\x78\xb4\x66\x8c\x6b\xe2\x7a\x81\xbf\x26\xc0\x7c\x6a\x9f\x6e\x0c\xb7\x41\xd6\x64\x12\xc9\xe5\xf1\x8c\x98\x31\x12\xed\x26\x4e\xfc\xb3\xd9\xf1\xd2\xcf\xd6\x25\xb2\xd3\x6b\xcb\x73\x31\x17\xa7\x03\x99\xba\x51\x5e\x99\xff\x94\x61\x46\xd4\x35\x41\xcb\xbe\xc0\xb3\x43\x11\x94\x36\xdf\x32\x16\x8f\x59\xd6\x8f\xc1\x7c\xa0\x40\xe9\xe4\xd7\x3b\xc6\x96\x53\x83\xa2\xc1\x05\x79\xf3\xfa\xaa\x70\x17\x84\x76\x94\xae\xd6\x3d\x6e\xe6\x4c\x59\x8b\x42\x4b\x71\x0d\xfd\x8f\x27\x97\x5d\xcc\x3b\xd4\x8d\x8f\x50\x57\xa3\x8f\x7b\xac\xd5\xd1\x2d\x34\x86\xa2\x90\x5d\x4d\x97\x79\xb1\x38\xdb\xe3\xfe\xd3\x70\xb0\xfd\x93\x94\x35\x7c\xfb\x5e\x56\x5a\x38\x91\x7d\x5a\xc3\x1e\xfc\x1b\x00\x00\xff\xff\x3a\x2e\x3c\xa6\xf4\x04\x00\x00")

func deployCrdsDnsZoneYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployCrdsDnsZoneYaml,
		"deploy/crds/dns-zone.yaml",
	)
}

func deployCrdsDnsZoneYaml() (*asset, error) {
	bytes, err := deployCrdsDnsZoneYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/crds/dns-zone.yaml", size: 1268, mode: os.FileMode(420), modTime: time.Unix(1542737069, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployCrdsHive_v1alpha1_hive_crYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xcc\x3b\xae\xc2\x30\x10\x46\xe1\xde\xab\x18\xe9\xd6\x49\x94\xd6\xdd\xed\x58\x01\xfd\x28\xfe\x13\x8f\xf0\x0b\xcf\x60\x60\xf7\xc8\xf5\xd1\x77\xb8\xc9\x1d\x5d\xa5\x16\x4f\x51\x06\xd6\xda\x50\x34\xca\x69\xab\xd4\x6d\xec\x9c\x5a\xe4\xdd\x3d\xa4\x04\x4f\x37\x19\x70\x19\xc6\x81\x8d\xbd\x23\x2a\x9c\xe1\x09\x1f\xce\x2d\x61\x99\xde\x69\xc3\x31\xd3\x1f\xfd\x87\x40\xa7\x20\x05\xa5\x88\x0e\x47\x24\x99\x2f\x78\x7a\xbe\xf8\x3b\xef\x87\xf6\x77\xb9\xb6\xc9\x96\xa3\x16\xeb\x35\x25\x74\x9f\xd8\xa0\xe6\x7e\x01\x00\x00\xff\xff\xa0\xde\xff\xce\x9a\x00\x00\x00")

func deployCrdsHive_v1alpha1_hive_crYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployCrdsHive_v1alpha1_hive_crYaml,
		"deploy/crds/hive_v1alpha1_hive_cr.yaml",
	)
}

func deployCrdsHive_v1alpha1_hive_crYaml() (*asset, error) {
	bytes, err := deployCrdsHive_v1alpha1_hive_crYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/crds/hive_v1alpha1_hive_cr.yaml", size: 154, mode: os.FileMode(420), modTime: time.Unix(1543604764, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployCrdsHive_v1alpha1_hive_crdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\x4a\x05\x31\x0c\x45\xf7\xfd\x8a\x7c\x41\x65\x76\xd2\xad\x2e\x04\xc5\x85\x0b\xf7\x71\x26\xef\x4d\x78\x9d\x26\x34\x69\xf1\xf3\xa5\x53\x15\xde\x26\x70\x0f\x87\x7b\x09\x2a\x7f\x52\x35\x96\x92\x00\x95\xe9\xdb\xa9\x8c\x64\xf1\xf6\x68\x91\xe5\xa1\x2f\x5f\xe4\xb8\x84\x1b\x97\x2d\xc1\x53\x33\x97\xe3\x83\x4c\x5a\x5d\xe9\x99\x2e\x5c\xd8\x59\x4a\x38\xc8\x71\x43\xc7\x14\x00\x0a\x1e\x94\x60\xe7\x4e\x16\xc7\x8d\xa2\x54\x6c\xe7\x8b\x47\x96\x60\x4a\xeb\xb0\xae\x55\x9a\x4e\xed\x5e\x98\x05\x36\x1c\x80\x39\xfb\xc2\x9d\xce\x98\xd9\xfc\xf5\x1f\xbd\xb1\xf9\x89\x35\xb7\x8a\xf9\x77\xf3\x24\xc6\xe5\xda\x32\xd6\xc9\x02\x80\xad\xa2\x94\xe0\x7d\x54\x2b\xae\xb4\x05\x80\xfe\xf7\x79\x5f\x30\xeb\x8e\x4b\xf8\x09\x00\x00\xff\xff\x6c\xae\x3f\x30\x0f\x01\x00\x00")

func deployCrdsHive_v1alpha1_hive_crdYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployCrdsHive_v1alpha1_hive_crdYaml,
		"deploy/crds/hive_v1alpha1_hive_crd.yaml",
	)
}

func deployCrdsHive_v1alpha1_hive_crdYaml() (*asset, error) {
	bytes, err := deployCrdsHive_v1alpha1_hive_crdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/crds/hive_v1alpha1_hive_crd.yaml", size: 271, mode: os.FileMode(420), modTime: time.Unix(1542320199, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xb1\x4e\x03\x31\x10\x44\x7b\x7f\xc5\xfe\xc0\x71\xa4\x43\xae\x29\x29\xa8\xe8\x17\xdf\x90\x5b\x61\x7b\x17\x7b\x09\xca\xdf\x23\x2b\x21\xb9\x48\x64\x4a\x7b\xde\xcc\x68\xd9\xe4\x0d\xad\x8b\xd6\x48\x6c\xd6\xe7\xc3\x2e\x7c\x4a\x5d\x22\x3d\xc3\xb2\x1e\x0b\xaa\x87\x02\xe7\x85\x9d\x63\x20\xaa\x5c\x10\x69\x95\x03\xa6\xe5\xea\x38\xbd\x77\xe3\x84\x48\x6a\xa8\x7d\x95\x0f\x9f\x86\x2d\x10\x65\x7e\x47\xee\x83\xa6\x51\x72\xc6\xd5\xd0\xd8\xb5\x85\x6e\x48\xe3\xb3\xc1\xb2\x24\xee\x91\x76\x81\xa8\x23\x23\xb9\xb6\x13\x56\xd8\xd3\xfa\xb2\xc9\xf9\x37\x89\xc8\x51\x2c\xb3\xe3\x4c\x6d\x86\x0f\xe5\x9b\x80\x3b\x11\x44\x7f\x83\x86\x92\x56\x67\xa9\x68\x17\x6c\xda\xde\xe0\x86\x1b\x92\xc2\x7b\x44\xfa\xfa\xe6\xe3\x83\xe8\xbc\xec\x55\x97\x1f\xa9\xf3\x70\xc7\xb1\xac\xfb\xc5\x6b\xda\x7c\xb3\x66\xba\x96\xbd\x6a\xf3\x48\x4f\x8f\xbf\x01\x00\x00\xff\xff\xee\xed\x69\x04\x9f\x01\x00\x00")

func deployDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDeploymentYaml,
		"deploy/deployment.yaml",
	)
}

func deployDeploymentYaml() (*asset, error) {
	bytes, err := deployDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/deployment.yaml", size: 415, mode: os.FileMode(420), modTime: time.Unix(1543527602, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployManagerNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xc6\x31\x0e\xc2\x30\x0c\x05\xd0\x3d\xa7\xf8\xea\xde\x88\x6e\x28\x87\x60\x64\x37\xad\x51\xad\x3a\x76\x14\x5b\x3d\x3f\x62\x7b\x34\xe4\xcd\x33\xc4\xad\xe1\xde\xca\x25\x76\x34\xbc\xa8\x73\x0c\xda\xb9\x74\x4e\x3a\x28\xa9\x15\x40\xe9\xc3\x1a\x7f\x01\xbb\x5b\x4e\x57\xe5\xb9\xa6\xbb\x46\xbd\x9e\x51\xc5\x1b\x96\xad\x3e\x96\x02\x18\x75\x6e\xf0\xc1\x16\xa7\x7c\x73\x3d\xe5\xe6\x5f\x00\x00\x00\xff\xff\xbb\x9a\xef\x94\x6c\x00\x00\x00")

func deployManagerNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployManagerNamespaceYaml,
		"deploy/manager-namespace.yaml",
	)
}

func deployManagerNamespaceYaml() (*asset, error) {
	bytes, err := deployManagerNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/manager-namespace.yaml", size: 108, mode: os.FileMode(420), modTime: time.Unix(1543528354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployOperatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x3f\x6f\xdb\x40\x0c\xc5\x77\x7d\x0a\x22\x9d\x13\x2b\x4b\x87\xdb\x84\xc4\x45\x87\x36\x16\xd4\xa0\x1d\x0b\xfa\x44\x5b\x44\xef\x5f\xef\x28\x19\xfa\xf6\x85\xe4\x3f\x38\xb5\xd6\xd8\x9b\x04\x3e\xf2\xfd\x1e\x09\x61\xe0\xef\x14\x13\x7b\xa7\x00\x43\x48\x9b\xe1\xb9\xf8\xc5\xae\x55\xf0\x4a\xc1\xf8\xd1\x92\x93\xc2\x92\x60\x8b\x82\xaa\x00\x70\x68\x49\x41\xc7\x03\x3d\xfa\x40\x11\xc5\xc7\x22\x05\xd2\x93\x16\x29\x18\xd6\x98\x14\x3c\x17\x00\x89\x0c\x69\xf1\x71\x52\x00\x2c\x8a\xee\xbe\xe0\x9e\x4c\x3a\x17\xee\x5b\x01\x08\xd9\x60\x50\xe8\x32\x96\xa1\xa7\x67\x16\x0e\x6b\x1e\x00\xd7\x48\xf3\x37\xc5\x81\x35\x55\x5a\xfb\xde\xc9\xdb\xca\x04\x80\xf6\x4e\x90\x1d\xc5\xcc\xff\x71\x95\x70\x7e\x1f\xa0\xa1\x60\x50\x13\x48\xc7\x09\x4e\x2c\x1d\x48\x47\xb0\xef\xd9\x08\xb0\xc5\x23\xcd\x0e\xd9\xc8\x5c\x54\xf0\xbb\xc7\xf1\x89\xfd\xa6\x3d\x7a\xdf\x9e\xd8\x6d\x26\x84\x9a\x36\x4f\x92\x75\x07\x1f\x25\xcb\x33\x25\xba\xe5\xac\x7d\x14\x05\x1f\xcb\xb2\x2c\xb3\x86\xeb\x51\x2c\x49\x64\x9d\x32\x45\x7b\x6b\xd1\xb5\x4b\xb7\xb5\xcd\xe6\x98\x75\x6f\x4c\xed\x0d\xeb\x51\x41\x65\x4e\x38\xe6\x76\xe4\x06\xb5\xe0\x5e\x8f\xf5\xa3\x7a\x7f\xf9\xfc\xf3\xad\xfa\xba\xfd\x56\x57\x2f\xdb\x45\x0f\xc0\x80\xa6\xa7\x4f\xd1\x5b\xf5\x97\x00\x70\x60\x32\x6d\x43\x87\x7f\x95\x8b\x56\xa3\x74\xea\xf6\x53\x3c\x4d\xb8\x14\x50\xd3\xdd\x18\xf5\xee\x75\x0e\xf1\x7f\xf9\x77\xd1\xbb\x7a\xdb\x54\xef\xbb\x66\x95\xaf\xe0\x61\x71\xf8\x87\xe2\x4f\x00\x00\x00\xff\xff\xc9\xb0\x11\xd9\x8a\x03\x00\x00")

func deployOperatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployOperatorYaml,
		"deploy/operator.yaml",
	)
}

func deployOperatorYaml() (*asset, error) {
	bytes, err := deployOperatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/operator.yaml", size: 906, mode: os.FileMode(420), modTime: time.Unix(1542740307, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xb1\x6e\xc3\x30\x0c\x44\x77\x7f\x85\x90\x25\x40\x81\xb8\xe8\x56\xf8\x07\xba\x17\x45\x77\x46\xbe\x24\x44\x24\x51\x20\x29\x03\xed\xd7\x17\x76\x9c\x0c\xf1\xd2\x4d\x27\x9d\xee\x9e\x44\xaa\xfc\x0d\x35\x96\x32\x04\x3d\x52\xec\xa9\xf9\x45\x94\x7f\xc9\x59\x4a\x7f\x7d\xb7\x9e\xe5\x75\x7a\xeb\xae\x5c\xc6\x21\x7c\x4a\x42\x97\xe1\x34\x92\xd3\xd0\x85\x10\x15\x8b\xf3\x8b\x33\xcc\x29\xd7\x21\x94\x96\x52\x17\x42\xa1\x8c\x21\x5c\x78\xc2\x41\x2a\x94\x5c\xb4\xd3\x96\x60\x43\x77\x08\x54\xf9\x43\xa5\x55\x9b\x33\x0e\x61\xb7\xeb\x42\x50\x98\x34\x8d\x58\xf7\xaa\x8c\xb6\x2c\x0c\x3a\x71\xc4\x4d\xa0\x8c\x55\xb8\xf8\x4d\xd5\x19\xdd\x1c\xc5\x27\x49\x2d\x23\x26\xe2\xbc\x1a\x27\xdc\x5d\x51\xca\x89\xcf\x99\xea\x3d\x2f\x2a\x96\xa3\x09\x7a\x5c\xdb\xf6\x2f\xfb\x2d\x16\xd5\xe5\xca\x13\xd8\x88\x9a\xe4\x27\x3f\xe2\x47\x42\x96\x62\x58\xa5\xa2\x26\x8e\xf4\xd0\xe6\xe4\x38\xb5\x64\xff\xeb\xcc\x52\xd8\x45\xb9\x9c\xfb\x28\x0a\xb1\x3e\x4a\xde\x42\xac\x9f\xb2\xba\x9f\x82\xcf\xf0\xdb\xc3\xe7\xe1\x60\xdb\x31\x0f\xa5\x97\x8a\x62\x17\x3e\x79\xcf\xb2\xcd\x9f\xd9\x36\xb0\x7f\x01\x00\x00\xff\xff\xc2\xfc\x18\x29\x2d\x02\x00\x00")

func deployRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployRoleYaml,
		"deploy/role.yaml",
	)
}

func deployRoleYaml() (*asset, error) {
	bytes, err := deployRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/role.yaml", size: 557, mode: os.FileMode(420), modTime: time.Unix(1542748964, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployRole_bindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\x3d\xae\xc2\x30\x0c\x07\xf0\x3d\xa7\xf0\x05\xda\xa7\xb7\xa1\x6c\xb0\xb0\x17\x89\xdd\x4d\x0d\x35\x6d\xed\xc8\x71\x32\x70\x7a\x84\x18\x98\xca\xfe\xff\xf8\x2d\x2c\x53\x84\x41\x57\x3a\xb1\x4c\x2c\xf7\x80\x99\xaf\x64\x85\x55\x22\xd8\x88\xa9\xc7\xea\xb3\x1a\x3f\xd1\x59\xa5\x5f\x0e\xa5\x67\xfd\x6b\xff\x61\x23\xc7\x09\x1d\x63\x00\x10\xdc\x28\xc2\xcc\x8d\x3a\xcd\x64\xe8\x6a\xa1\xd4\xf1\x41\xc9\x4b\x0c\x1d\x7c\x6e\x2e\x64\x8d\x13\x1d\x53\xd2\x2a\xbe\x53\x33\x5d\x69\xa0\xdb\x7b\xf5\x8b\xdb\xc9\x02\x60\xe6\xb3\x69\xcd\x3f\xac\xe1\x15\x00\x00\xff\xff\xe6\xd4\xca\xc7\xe4\x00\x00\x00")

func deployRole_bindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployRole_bindingYaml,
		"deploy/role_binding.yaml",
	)
}

func deployRole_bindingYaml() (*asset, error) {
	bytes, err := deployRole_bindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/role_binding.yaml", size: 228, mode: os.FileMode(420), modTime: time.Unix(1542319940, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployService_accountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x31\x0e\x80\x30\x08\x05\xd0\x9d\x53\x70\x01\x07\x57\x36\xcf\x60\xe2\x4e\xda\x9f\x48\x4c\xa1\x41\xec\xf9\x7d\x3a\xed\x42\xbe\x16\x2e\xbc\x76\x7a\xcc\xbb\xf0\x89\x5c\xd6\x70\xb4\x16\x9f\x17\x0d\x94\x76\x2d\x15\x62\x76\x1d\x10\xbe\x6d\x61\x8b\x89\xd4\x8a\xa4\x3f\x00\x00\xff\xff\x6b\x1f\x4d\x0a\x44\x00\x00\x00")

func deployService_accountYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployService_accountYaml,
		"deploy/service_account.yaml",
	)
}

func deployService_accountYaml() (*asset, error) {
	bytes, err := deployService_accountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/service_account.yaml", size: 68, mode: os.FileMode(420), modTime: time.Unix(1542319940, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/.DS_Store": deployDs_store,
	"deploy/config/manager_deployment.yaml": deployConfigManager_deploymentYaml,
	"deploy/config/manager_service.yaml": deployConfigManager_serviceYaml,
	"deploy/config/rbac-role.yaml": deployConfigRbacRoleYaml,
	"deploy/config/rbac_role_binding.yaml": deployConfigRbac_role_bindingYaml,
	"deploy/crds/cluster-deployment.yaml": deployCrdsClusterDeploymentYaml,
	"deploy/crds/dns-zone.yaml": deployCrdsDnsZoneYaml,
	"deploy/crds/hive_v1alpha1_hive_cr.yaml": deployCrdsHive_v1alpha1_hive_crYaml,
	"deploy/crds/hive_v1alpha1_hive_crd.yaml": deployCrdsHive_v1alpha1_hive_crdYaml,
	"deploy/deployment.yaml": deployDeploymentYaml,
	"deploy/manager-namespace.yaml": deployManagerNamespaceYaml,
	"deploy/operator.yaml": deployOperatorYaml,
	"deploy/role.yaml": deployRoleYaml,
	"deploy/role_binding.yaml": deployRole_bindingYaml,
	"deploy/service_account.yaml": deployService_accountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{deployDs_store, map[string]*bintree{}},
		"config": &bintree{nil, map[string]*bintree{
			"manager_deployment.yaml": &bintree{deployConfigManager_deploymentYaml, map[string]*bintree{}},
			"manager_service.yaml": &bintree{deployConfigManager_serviceYaml, map[string]*bintree{}},
			"rbac-role.yaml": &bintree{deployConfigRbacRoleYaml, map[string]*bintree{}},
			"rbac_role_binding.yaml": &bintree{deployConfigRbac_role_bindingYaml, map[string]*bintree{}},
		}},
		"crds": &bintree{nil, map[string]*bintree{
			"cluster-deployment.yaml": &bintree{deployCrdsClusterDeploymentYaml, map[string]*bintree{}},
			"dns-zone.yaml": &bintree{deployCrdsDnsZoneYaml, map[string]*bintree{}},
			"hive_v1alpha1_hive_cr.yaml": &bintree{deployCrdsHive_v1alpha1_hive_crYaml, map[string]*bintree{}},
			"hive_v1alpha1_hive_crd.yaml": &bintree{deployCrdsHive_v1alpha1_hive_crdYaml, map[string]*bintree{}},
		}},
		"deployment.yaml": &bintree{deployDeploymentYaml, map[string]*bintree{}},
		"manager-namespace.yaml": &bintree{deployManagerNamespaceYaml, map[string]*bintree{}},
		"operator.yaml": &bintree{deployOperatorYaml, map[string]*bintree{}},
		"role.yaml": &bintree{deployRoleYaml, map[string]*bintree{}},
		"role_binding.yaml": &bintree{deployRole_bindingYaml, map[string]*bintree{}},
		"service_account.yaml": &bintree{deployService_accountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

